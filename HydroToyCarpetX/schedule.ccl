# Schedule definitions for thorn HydroToyCarpetX

STORAGE: conserved[2]
STORAGE: primitive
STORAGE: flux_x flux_y flux_z



# Initial conditions

SCHEDULE HydroToyCarpetX_Initialize AT initial
{
  LANG: C
  WRITES: conserved(interior)
  INVALIDATES: primitive(everywhere)
  INVALIDATES: flux_x(everywhere) flux_y(everywhere) flux_z(everywhere)
  SYNC: conserved
} "Set up hydro initial conditions"

SCHEDULE HydroToyCarpetX_Boundaries AT initial AFTER HydroToyCarpetX_Initialize
{
  LANG: C
  WRITES: conserved(boundary)
  SYNC: conserved
} "Apply boundary conditions after regridding"

SCHEDULE HydroToyCarpetX_EstimateError AT postinitial
{
  LANG: C
  READS: conserved(everywhere)
  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding initial conditions"



# Regridding

SCHEDULE HydroToyCarpetX_Boundaries AT postregrid
{
  LANG: C
  SYNC: conserved
} "Apply boundary conditions after regridding"



# Dependent quantities

# TODO: Use a more accurate condition
#if (output || output_every > 0) {
#  SCHEDULE GROUP HydroToyCarpetX_OutputGroup AT poststep
#  {
#  } "Output HydroToy quantities"
#
#    SCHEDULE HydroToyCarpetX_Pressure IN HydroToyCarpetX_OutputGroup
#    {
#      LANG: C
#      READS: conserved(everywhere)
#      WRITES: primitive(everywhere)
#      INVALIDATES: flux_x(everywhere) flux_y(everywhere) flux_z(everywhere)
#    } "Calculate pressure"
#
#    SCHEDULE HydroToyCarpetX_Fluxes IN HydroToyCarpetX_OutputGroup AFTER HydroToyCarpetX_Pressure
#    {
#      LANG: C
#      READS: conserved(everywhere)
#      READS: primitive(everywhere)
#      WRITES: flux_x(interior) flux_y(interior) flux_z(interior)
#    } "Calculate the hydro fluxes"
#
#    if (output) {
#      SCHEDULE HydroToyCarpetX_Output IN HydroToyCarpetX_OutputGroup AFTER HydroToyCarpetX_Fluxes
#      {
#        LANG: C
#        READS: conserved(interior)
#        READS: flux_x(interior) flux_y(interior) flux_z(interior)
#        READS: CarpetX::regrid_error(interior)
#      } "Output grid data"
#    } # if output
#}

SCHEDULE HydroToyCarpetX_EstimateError AT poststep
{
  LANG: C
  READS: conserved(everywhere)
  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding during evolution"



# Time stepping

SCHEDULE HydroToyCarpetX_CopyConserved AT evol
{
  LANG: C
  READS: conserved_p(everywhere)
  WRITES: conserved(everywhere)
  INVALIDATES: primitive(everywhere)
  INVALIDATES: flux_x(everywhere) flux_y(everywhere) flux_z(everywhere)
} "Copy conserved variables to current time level"

SCHEDULE HydroToyCarpetX_Pressure AT evol AFTER HydroToyCarpetX_CopyConserved
{
  LANG: C
  READS: conserved(everywhere)
  WRITES: primitive(everywhere)
  INVALIDATES: flux_x(everywhere) flux_y(everywhere) flux_z(everywhere)
} "Calculate pressure"

SCHEDULE HydroToyCarpetX_Fluxes AT evol AFTER HydroToyCarpetX_Pressure
{
  LANG: C
  READS: conserved(everywhere)
  READS: primitive(everywhere)
  WRITES: flux_x(interior) flux_y(interior) flux_z(interior)
} "Calculate the hydro fluxes"

SCHEDULE HydroToyCarpetX_Evolve AT evol AFTER HydroToyCarpetX_Fluxes
{
  LANG: C
  READS: conserved_p(interior)
  READS: flux_x(interior) flux_y(interior) flux_z(interior)
  WRITES: conserved(interior)
  INVALIDATES: primitive(everywhere)
  # Note: We need to keep the fluxes valid for the flux registers 
  SYNC: conserved
} "Evolve the hydro equations"



# Restriction

SCHEDULE HydroToyCarpetX_Boundaries AT postrestrict
{
  LANG: C
  # Refluxing is over, we can now mark the fluxes as invalid
  INVALIDATES: flux_x(everywhere) flux_y(everywhere) flux_z(everywhere)
  SYNC: conserved
} "Apply boundary conditions after restricting"
