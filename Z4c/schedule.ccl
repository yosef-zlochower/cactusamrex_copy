# Schedule definitions for thorn Z4c

STORAGE: chi
STORAGE: gamma_tilde
STORAGE: K_hat
STORAGE: A_tilde
STORAGE: Gam_tilde
STORAGE: Theta
STORAGE: alphaG
STORAGE: betaG

STORAGE: ZtC
STORAGE: HC
STORAGE: MtC
STORAGE: allC

STORAGE: chi_rhs
STORAGE: gamma_tilde_rhs
STORAGE: K_hat_rhs
STORAGE: A_tilde_rhs
STORAGE: Gam_tilde_rhs
STORAGE: Theta_rhs
STORAGE: alphaG_rhs
STORAGE: betaG_rhs



################################################################################


SCHEDULE GROUP Z4c_InitialGroup AT initial AFTER ADMBase_PostInitial
{
} "Convert ADM to Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup AT initial AFTER Z4c_InitialGroup BEFORE ADMBase_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup2 AT initial AFTER (TmunuBase_SetTmunuVars, Z4c_PostStepGroup) BEFORE ADMBase_SetADMRHS
{
} "Post-process Z4c variables, part 2"



SCHEDULE GROUP Z4c_PostStepGroup AT postregrid BEFORE ADMBase_SetADMVars
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup2 AT postregrid AFTER (TmunuBase_SetTmunuVars, Z4c_PostStepGroup) BEFORE ADMBase_SetADMRHS
{
} "Post-process Z4c variables, part 2"



SCHEDULE GROUP Z4c_AnalysisGroup AT analysis
{
} "Analyse Z4c variables"


SCHEDULE GROUP Z4c_PostStepGroup IN ODESolvers_PostStep BEFORE (ADMBase_SetADMVars, ADMBase_SetADMRHS)
{
} "Post-process Z4c variables"


SCHEDULE GROUP Z4c_PostStepGroup2 IN ODESolvers_PostStep AFTER (TmunuBase_SetTmunuVars, Z4c_PostStepGroup) BEFORE ADMBase_SetADMRHS
{
} "Post-process Z4c variables, part 2"

SCHEDULE GROUP Z4c_RHSGroup IN ODESolvers_RHS
{
} "Calculate Z4c RHS"



################################################################################



SCHEDULE Z4c_Test AT wragh
{
  LANG: C
  OPTIONS: meta
} "Self-test"



# We have 4 schedule groups:
# 1. initial: set up core Z4c variables from ADM variables
# 2. poststep: post-process core Z4c variables and calculate other variables
# 3. analysis: calculate constraints etc.
# 4. rhs: calculate RHS of Z4c variables



SCHEDULE Z4c_Initial1 IN Z4c_InitialGroup
{
  LANG: C
  READS: ADMBase::metric(everywhere)
  READS: ADMBase::curv(everywhere)
  READS: ADMBase::lapse(everywhere)
  READS: ADMBase::shift(everywhere)
  WRITES: chi(everywhere)
  WRITES: gamma_tilde(everywhere)
  WRITES: K_hat(everywhere)
  WRITES: A_tilde(everywhere)
  WRITES: Theta(everywhere)
  WRITES: alphaG(everywhere)
  WRITES: betaG(everywhere)
} "Convert ADM to Z4c variables, part 1"

SCHEDULE Z4c_Initial2 IN Z4c_InitialGroup AFTER Z4c_Initial1
{
  LANG: C
  READS: gamma_tilde(everywhere)
  WRITES: Gam_tilde(interior)
} "Convert ADM to Z4c variables, part 2"



SCHEDULE Z4c_Sync IN Z4c_PostStepGroup
{
  LANG: C
  SYNC: chi
  SYNC: gamma_tilde
  SYNC: K_hat
  SYNC: A_tilde
  SYNC: Gam_tilde
  SYNC: Theta
  SYNC: alphaG
  SYNC: betaG
} "Synchronize Z4c variables"

SCHEDULE Z4c_Boundaries IN Z4c_PostStepGroup AFTER Z4c_Sync
{
  LANG: C
  WRITES: chi(boundary)
  WRITES: gamma_tilde(boundary)
  WRITES: K_hat(boundary)
  WRITES: A_tilde(boundary)
  WRITES: Gam_tilde(boundary)
  WRITES: Theta(boundary)
  WRITES: alphaG(boundary)
  WRITES: betaG(boundary)
} "Apply boundary conditions to Z4c variables"

SCHEDULE Z4c_Enforce IN Z4c_PostStepGroup AFTER Z4c_Boundaries
{
  LANG: C
  READS: chi(everywhere)
  READS: gamma_tilde(everywhere)
  READS: A_tilde(everywhere)
  READS: alphaG(everywhere)
  WRITES: chi(everywhere)
  WRITES: gamma_tilde(everywhere)
  WRITES: A_tilde(everywhere)
  WRITES: alphaG(everywhere)
} "Enforce algebraic Z4c constraints"

if (calc_ADM_vars) {
  SCHEDULE Z4c_ADM IN Z4c_PostStepGroup AFTER Z4c_Enforce
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: TmunuBase::eTtt(interior)
    READS: TmunuBase::eTti(interior)
    READS: TmunuBase::eTij(interior)
    WRITES: ADMBase::metric(everywhere)
    WRITES: ADMBase::curv(everywhere)
    WRITES: ADMBase::lapse(everywhere)
    WRITES: ADMBase::dtlapse(everywhere)
    WRITES: ADMBase::shift(everywhere)
    WRITES: ADMBase::dtshift(everywhere)
  } "Convert Z4c to ADM variables"
}

if (calc_ADMRHS_vars) {
  SCHEDULE Z4c_ADM2 IN Z4c_PostStepGroup2
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: alphaG(everywhere)
    READS: betaG(everywhere)
    READS: TmunuBase::eTtt(interior)
    READS: TmunuBase::eTti(interior)
    READS: TmunuBase::eTij(interior)
    WRITES: ADMBase::dtcurv(interior)
    WRITES: ADMBase::dt2lapse(interior)
    WRITES: ADMBase::dt2shift(interior)
    SYNC: ADMBase::dtcurv
    SYNC: ADMBase::dt2lapse
    SYNC: ADMBase::dt2shift
  } "Calculate second time derivatives of ADM variables"

  SCHEDULE Z4c_ADM2Boundaries IN Z4c_PostStepGroup2
  {
    LANG: C
    WRITES: ADMBase::dtcurv(boundary)
    WRITES: ADMBase::dt2lapse(boundary)
    WRITES: ADMBase::dt2shift(boundary)
  } "Apply boundary conditions to second time derivatives of ADM variables"
}



if (calc_constraints) {
  SCHEDULE Z4c_Constraints IN Z4c_AnalysisGroup
  {
    LANG: C
    READS: chi(everywhere)
    READS: gamma_tilde(everywhere)
    READS: K_hat(everywhere)
    READS: A_tilde(everywhere)
    READS: Gam_tilde(everywhere)
    READS: Theta(everywhere)
    READS: TmunuBase::eTtt(interior)
    READS: TmunuBase::eTti(interior)
    READS: TmunuBase::eTij(interior)
    WRITES: ZtC(interior)
    WRITES: HC(interior)
    WRITES: MtC(interior)
    WRITES: allC(interior)
    SYNC: ZtC
    SYNC: HC
    SYNC: MtC
    SYNC: allC
  } "Calculate Z4c constraints"

  SCHEDULE Z4c_ConstraintBoundaries IN Z4c_AnalysisGroup AFTER Z4c_Constraints
  {
    LANG: C
    WRITES: ZtC(boundary)
    WRITES: HC(boundary)
    WRITES: MtC(boundary)
    WRITES: allC(boundary)
  } "Apply boundary conditions to Z4c constraints"
}



SCHEDULE Z4c_RHS IN Z4c_RHSGroup
{
  LANG: C
  READS: chi(everywhere)
  READS: gamma_tilde(everywhere)
  READS: K_hat(everywhere)
  READS: A_tilde(everywhere)
  READS: Gam_tilde(everywhere)
  READS: Theta(everywhere)
  READS: alphaG(everywhere)
  READS: betaG(everywhere)
  READS: TmunuBase::eTtt(interior)
  READS: TmunuBase::eTti(interior)
  READS: TmunuBase::eTij(interior)
  WRITES: chi_rhs(interior)
  WRITES: gamma_tilde_rhs(interior)
  WRITES: K_hat_rhs(interior)
  WRITES: A_tilde_rhs(interior)
  WRITES: Gam_tilde_rhs(interior)
  WRITES: Theta_rhs(interior)
  WRITES: alphaG_rhs(interior)
  WRITES: betaG_rhs(interior)
  SYNC: chi_rhs
  SYNC: gamma_tilde_rhs
  SYNC: K_hat_rhs
  SYNC: A_tilde_rhs
  SYNC: Gam_tilde_rhs
  SYNC: Theta_rhs
  SYNC: alphaG_rhs
  SYNC: betaG_rhs
} "Calculate Z4c RHS"

SCHEDULE Z4c_RHSBoundaries IN Z4c_RHSGroup AFTER Z4c_RHS
{
  LANG: C
  WRITES: chi_rhs(boundary)
  WRITES: gamma_tilde_rhs(boundary)
  WRITES: K_hat_rhs(boundary)
  WRITES: A_tilde_rhs(boundary)
  WRITES: Gam_tilde_rhs(boundary)
  WRITES: Theta_rhs(boundary)
  WRITES: alphaG_rhs(boundary)
  WRITES: betaG_rhs(boundary)
} "Apply boundary conditions to Z4c RHS variables"



################################################################################



SCHEDULE GROUP Z4c_PostStepGroup AT postrestrict
{
} "Post-process Z4c variables"

SCHEDULE GROUP Z4c_PostStepGroup AT postrestrictinitial
{
} "Post-process Z4c variables"


# error estimation based on metric determinant

SCHEDULE Z4c_Estimate AS EstimateError AT postinitial
{
  LANG: C
  WRITES: CarpetX::regrid_error(interior)
} "Estimate error"

SCHEDULE Z4c_Estimate AS EstimateError AT poststep
{
  LANG: C
  READS: chi(interior)
  WRITES: CarpetX::regrid_error(interior)
} "Estimate error"
